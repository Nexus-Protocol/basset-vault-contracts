{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "anyone"
      ],
      "properties": {
        "anyone": {
          "type": "object",
          "required": [
            "anyone_msg"
          ],
          "properties": {
            "anyone_msg": {
              "$ref": "#/definitions/AnyoneMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "yourself"
      ],
      "properties": {
        "yourself": {
          "type": "object",
          "required": [
            "yourself_msg"
          ],
          "properties": {
            "yourself_msg": {
              "$ref": "#/definitions/YourselfMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "governance"
      ],
      "properties": {
        "governance": {
          "type": "object",
          "required": [
            "governance_msg"
          ],
          "properties": {
            "governance_msg": {
              "$ref": "#/definitions/GovernanceMsg"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnyoneMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "honest_work"
          ],
          "properties": {
            "honest_work": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "rebalance"
          ],
          "properties": {
            "rebalance": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "claim_remainder"
          ],
          "properties": {
            "claim_remainder": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "GovernanceMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "psi_distributor_addr": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "YourselfMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "swap_anc"
          ],
          "properties": {
            "swap_anc": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "disribute_rewards"
          ],
          "properties": {
            "disribute_rewards": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
